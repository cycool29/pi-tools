#!/bin/bash
# shellcheck disable=SC2155,SC2094,SC2034,SC2059

update_apps() {
	sudo_password
	status_bold "Updating APT"
	status "Updating APT package list..."
	OUTPUT="$(sudo apt update --allow-releaseinfo-change 2>&1)" || error "Failed to update APT package list.:\n${OUTPUT}"
	if echo "$OUTPUT" | grep -q "All packages are up to date"; then
		success "All APT packages are up to date." 
	elif echo "$OUTPUT" | grep -q 'can be upgraded'; then
		echo "$OUTPUT" | grep 'can be upgraded' --color=None | sed "s/Run 'apt list --upgradable' to see it.//g"
	else 
		error "pi-tools failed to parse APT output:\n$OUTPUT" 
		
	fi
	success_bold "Done"
}

set_keyboard() {
	status_bold "Configuring keyboard"
	sudo_password
	status "Please select the keymap of the keyboard."
	sudo -E sed -i /etc/default/keyboard -e "s/^XKBLAYOUT.*/XKBLAYOUT=\"$(grep "$(cut -c23- < "${DIRECTORY}/keymaps" | fzf --height 20 --cycle)" < "${DIRECTORY}/keymaps" | cut -c1-22 | xargs)\"/"
	status "Configuring keyboard-configuration..."
	OUTPUT="$(sudo -E dpkg-reconfigure -f noninteractive keyboard-configuration 2>&1)" || error "Failed to configure keyboard-configuration.\nOutput:\n${OUTPUT}"
	status "Enabling keyboard-setup initscript..."
	OUTPUT="$(sudo -E invoke-rc.d keyboard-setup start)" || error "Failed to enable keyboard-setup initscript.\nError:\n${OUTPUT}"
	status "Setting up keyboard..."
	sudo -E setsid sh -c 'exec setupcon -k --force <> /dev/tty1 >&0 2>&1' || error "Failed to set up the font and the keyboard on the console.\nOutput:\n${OUTPUT}"
	sudo -E udevadm trigger --subsystem-match=input --action=change || error "Failed to trigger input change in udevadm.\nOutput:\n${OUTPUT}"
	success_bold "Done"
}

get_debian_version(){
	DEBIAN_VERSION="$(cut -d . -f 1 < /etc/debian_version)" || error "Failed to retrieve Debian version number.\nPLEASE report to https://github.com/cycool29/pi-tools/issue if you are on Raspberry Pi."
}

trap "error 'Exiting now.'" INT

sudo_password
while read -r i; do
	if [ "$(dpkg -l "$i" 2> /dev/null | tail -n 1 | cut -d ' ' -f 1)" != "ii" ]; then
		PACKAGE_TO_INSTALL+="$i "
	fi
done <"${DIRECTORY}/dependencies"

[ "${PACKAGE_TO_INSTALL}" != '' ] && status_bold "Installing required dependencies" && (OUTPUT="$(sudo apt-get update 2>&1 && sudo apt-get install "${PACKAGE_TO_INSTALL}" 2>&1)" || error "Failed to install required dependencies.\nError:\n${OUTPUT}")

if ! ping -q -c1 example.com &>/dev/null; then
	status "No internet connection (failed to ping example.com), running in no internet mode..."
	NO_INTERNET=1
fi
get_pi_version
get_device_info noprint
get_debian_version

case $1 in
	-h|--help)
		show_help_message
	;;
	d|device-info)
		shift
		if [ "$1" == "--noprint" ]; then
			get_device_info noprint
		else 
			get_device_info
		fi
	;;
	u|update-apps)
		shift
		update_apps
	;;
	sk|set-keyboard)
		shift
		set_keyboard
	;;
	ef|expand-filesystem)
		shift
		expand_rootfs
	;;
	*)
		error "Option not recognized.\n" --no-exit
		show_help_message
esac
#echo "$(echo "apt ($(apt list --installed  | grep -v Listing 2>/dev/null | wc -l))")$([ -a "$(command -v snap)" ] && if ! snap list 2>&1 | grep -q "No snaps are installed"; then echo " snap ($(snap list | tail -n +2 | wc -l))"; fi)$([ -a "$(command -v flatpak)" ] && if flatpak info 2>/dev/null | grep -q "Note that the directories"; then export XDG_DATA_DIRS="$XDG_DATA_DIRS:$(flatpak info 2>/dev/null | tail -n +4 | head -n 2 | xargs | sed 's/ /:/g')"; fi && [ "$(flatpak list)" != "" ] && echo " flatpak ($(flatpak list | grep -v "Application ID"  | wc -l))")"
