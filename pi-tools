#!/usr/bin/env bash
# shellcheck disable=SC2155,SC2094,SC2034,SC2059

export DIRECTORY="$(dirname "$(readlink -f "$0")")"

# check if this script is running through a pipe or being redirected
if ! [ -t 1 ] || ! [ -t 2 ]; then
	NOT_TERMINAL="1"
fi

# info, debug, dump, error , question

error() {
	while is_not_empty "${1}"; do
		case "${1}" in
		--no-exit) # do not exit after prining error messages
			local NO_EXIT=1
			shift
			;;
		--user-err) # user error, not asking user to open an issue on github
			local USER_ERROR=1
			shift
			;;
		--dev-err) # devs error, ask users to open an issue on github
			local DEV_ERROR=1
			shift
			;;
		*)
			local ERROR_MESSAGES="${1}"
			shift
			;;
		esac
		shift
	done
	if is_not_empty "${USER_ERROR}"; then
		echo -e "${RED}${BOLD}[!] User error:${NORMAL} ${RED}${ERROR_MESSAGES}${NORMAL}"
	elif is_not_empty "${DEV_ERROR}"; then
		echo -e "${RED}${BOLD}[!]Developer error:${NORMAL} ${RED}${ERROR_MESSAGES}${NORMAL}"
	fi
	is_empty "${NO_EXIT}" && exit "${EXIT_CODE}"
}

info() {
	is_not_empty "${ENABLE_INFO}" && echo "${@}"
}

debug() {
	is_not_empty "${ENABLE_DEBUG}" && echo "${@}"
}

dump() {
	is_not_empty "${ENABLE_DUMP}" && echo "${@}"
}

question() {
	echo -e "${YELLOW}${BOLD}[?]${NORMAL} ${LIGHT_YELLOW}${*}${NORMAL}"
}

pi-tools_help() {
	echo "╱╱╱╱╱╱╱╭╮╱╱╱╱╱╱╭╮
╱╱╱╱╱╱╭╯╰╮╱╱╱╱╱┃┃
╭━━┳╮╱╰╮╭╋━━┳━━┫┃╭━━╮
┃╭╮┣╋━━┫┃┃╭╮┃╭╮┃┃┃━━┫
┃╰╯┃┣━━┫╰┫╰╯┃╰╯┃╰╋━━┃
┃╭━┻╯╱╱╰━┻━━┻━━┻━┻━━╯
┃┃
╰╯"
	echo "pi-tools (pt) 1.0 on Raspberry Pi ${PI_VERSION}, $(dpkg --print-architecture)"
	echo "Installed at ${DIRECTORY}."
	echo
	echo "pi-tools is a command-line tool to access almost all settings, functions, etc, of your Raspberry Pi."

}

is_empty() {
	local TARGET="${1}"

	[[ -z "${TARGET}" ]]
}

is_not_empty() {
	local TARGET="${1}"

	[[ -n "${TARGET}" ]]
}

is_file() {
	local TARGET="${1}"

	[[ -f "${TARGET}" ]]
}

is_not_file() {
	TARGET="${1}"
	if is_file "${TARGET}"; then
		return 1
	else
		return 0
	fi
}

is_dir() {
	local TARGET="${1}"

	[[ -d "${TARGET}" ]]
}

is_not_number() {
	if is_number "$1"; then
		return 1
	else
		return 0
	fi
}

is_number() {
	case $1 in
	'' | *[!0-9]*) return 0 ;;
	*) return 1 ;;
	esac
}

is_ssh() {
	if pstree -p | grep -E --quiet --extended-regexp ".*sshd.*\($$\)"; then
		return 0
	else
		return 1
	fi
}

is_arm() {
	ARCH=$(dpkg --print-architecture)
	if [ "$ARCH" == "armhf" ] || [ "$ARCH" == "arm64" ]; then
		return 0
	else
		return 1
	fi
}

is_live() {
	grep -q "boot=live" /boot/cmdline.txt
	return $?
}

is_fkms() {
	if grep -s -q okay /proc/device-tree/soc/v3d@7ec00000/status \
		/proc/device-tree/soc/firmwarekms@7e600000/status \
		/proc/device-tree/v3dbus/v3d@7ec04000/status; then
		return 0
	else
		return 1
	fi
}

set_config_var() {
	sudo_password
	PROPERTY="$1"
	VALUE="$2"
	sudo cp -a /boot/config.txt /boot/config.txt.bak || error "Failed to backup /boot/config.txt"
	if grep -q "^${PROPERTY}" /boot/config.txt; then
		sudo sed -i '/'"^${PROPERTY}="'/{x;/^$/!d;g;}' /boot/config.txt # remove all occurence except first one
		sudo sed -i "s/^${PROPERTY}=.*/${PROPERTY}=${VALUE}/" /boot/config.txt
	else
		echo "${PROPERTY}=${VALUE}" | sudo tee -a /boot/config.txt >/dev/null
	fi
}

clear_config_var() {
	sudo_password
	PROPERTY="$1"
	sudo cp -a /boot/config.txt /boot/config.txt.bak || error "Failed to backup /boot/config.txt"
	sudo sed -i "/^[^#]/ s/\(^.*${PROPERTY}=.*$\)/#\1/" /boot/config.txt
}

get_config_var() {
	PROPERTY="$1"
	sudo_password
	grep -m 1 "^${PROPERTY}" | sed s/.*=//g
}

sudo_password() {
	if ! sudo -n ls &>/dev/null; then
		info "This operation needs root access."
		sudo -S true || error "Authentication Failed."
		success "Root authentication success."
	fi
}

get_pi_version() {
	if grep -q "^Revision\s*:\s*00[0-9a-fA-F][0-9a-fA-F]$" /proc/cpuinfo || grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[0-36][0-9a-fA-F]$" /proc/cpuinfo; then
		echo "1"
	elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]04[0-9a-fA-F]$" /proc/cpuinfo; then
		echo "2"
	elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[9cC][0-9a-fA-F]$" /proc/cpuinfo; then
		echo "3"
	elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F]3[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]$" /proc/cpuinfo; then
		echo "4"
	else
		error "Raspberry Pi version not detected.\nIf you are using a Raspberry Pi 1, 2, 3 or 4, PLEASE open an issue https://github.com/cycool29/pi-tools/issue."
	fi
}

get_codename() {
	lsb_release -sc
}

check_internet() {
	ping -q -c1 example.com &>/dev/null
	return $?
}

install_pi-tools_dependencies() {
	sudo_password || exit 1
	# shellcheck disable=2046
	(sudo apt-get update --allow-releaseinfo-change 2>&1 && sudo apt-get install -qq --no-install-recommends $(cat "${DIRECTORY}/files/dependencies")) || error "Failed to install pi-tools dependencies."
}

prepare() {
	while read -r i; do
		if ! dpkg -s "$i" &>/dev/null; then
			install_pi-tools_dependencies || exit 1
			break
		fi
	done <"${DIRECTORY}/files/dependencies"

	chmod +x "${DIRECTORY}"/scripts/*
}

scan_bluetooth() { # scan bluetooth devices, the only 1 accepted is the timeout duration
	TIMEOUT_DURATION="${1}"
	bluetoothctl --timeout "${TIMEOUT_DURATION}" scan on
}

detect_device_type() {
	TARGET="${1}"
	if [[ "${TARGET}" =~ ^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$ ]]; then
		echo "MAC Address"
	else
		echo "Device Name"
	fi
}

turn_bluetooth() {
	case ${1} in
	on)
		info "Turning on Bluetooth..."
		sudo_password || exit 1
		sudo rfkill unblock bluetooth || error "Failed to turn on Bluetooth."
		sudo service bluetooth restart
		bluetoothctl power on
		;;
	off)
		info "Turning off Bluetooth..."
		sudo_password || exit 1
		sudo rfkill block bluetooth || error "Failed to turn off Bluetooth."
		;;
	restart)
		info "Restarting Bluetooth"
		sudo_password || exit 1
		sudo rfkill block bluetooth || error "Failed to turn off Bluetooth."
		sudo rfkill unblock bluetooth || error "Failed to turn on Bluetooth."
		;;
	esac
}

find_root_partition() {
	sudo findmnt / -o source -n
}

find_root_device() {
	local ROOT_PARTITION="${1}"
	echo "/dev/$(sudo lsblk -no pkname "${ROOT_PARTITION}")"
}

find_root_partition_number() {
	local ROOT_PARTITION="${1}"
	grep -o "[[:digit:]]*$" <<<"${ROOT_PARTITION}"
}

find_last_root_partition_number() {
	local ROOT_DEVICE="${1}"
	sudo parted "${ROOT_DEVICE}" -ms unit s p | tail -n 1 | cut -f 1 -d:
}

find_partition_start_offset() {
	local ROOT_DEVICE="${1}"
	local PARTITION_NUMBER="${2}"
	local PARTITION_START="$(sudo parted "${ROOT_DEVICE}" -ms unit s p | grep "^${PARTITION_NUMBER}" | cut -f 2 -d: | sed 's/[^0-9]//g')"
	if is_empty "${PARTITION_START}"; then
		return 1
	else
		echo "${PARTITION_START}"
	fi
}

update_apps() {
	sudo_password
	info_bold "Updating APT"
	info "Updating APT package list..."
	OUTPUT="$(sudo apt update --allow-releaseinfo-change 2>&1)" || error "Failed to update APT package list.:\n${OUTPUT}"
	if echo "$OUTPUT" | grep -q "All packages are up to date"; then
		success "All APT packages are up to date."
	elif echo "$OUTPUT" | grep -q 'can be upgraded'; then
		echo "$OUTPUT" | grep 'can be upgraded' --color=None | sed "s/Run 'apt list --upgradable' to see it.//g"
	else
		error "pi-tools failed to parse APT output:\n$OUTPUT"
	fi
}

set_keyboard() {
	sudo_password
	question "Please select the keymap of the keyboard."
	KEYMAP_CHOICE="$(cut -c23- <"${DIRECTORY}/files/keymaps" | fzf --height 20 --cycle)"          # user choice
	KEYMAP_CHOICE="$(grep "${KEYMAP_CHOICE}" <"${DIRECTORY}/files/keymaps" | cut -c1-22 | xargs)" # filter the choice
	sudo -E sed -i /etc/default/keyboard -e "s/^XKBLAYOUT.*/XKBLAYOUT=\"${KEYMAP_CHOICE}\"/"
	info "Configuring keyboard-configuration..."
	sudo -E dpkg-reconfigure -f noninteractive keyboard-configuration 2>&1
	info "Enabling keyboard-setup initscript..."
	sudo -E invoke-rc.d keyboard-setup start
	info "Setting up keyboard..."
	sudo -E setsid sh -c 'exec setupcon -k --force <> /dev/tty1 >&0 2>&1'
	sudo -E udevadm trigger --subsystem-match=input --action=change
}

is_installed() {
	if [ "$(dpkg -l "$1" 2>/dev/null | tail -n 1 | cut -d ' ' -f 1)" != "ii" ]; then
		return 1
	else
		return 0
	fi
}

get_device_info() {

	DPKG_PACKAGES="$(dpkg --get-selections | grep -vc deinstall)"

	command -v snap &>/dev/null && ! snap list 2>&1 |
		grep -q "No snaps are installed" &&
		SNAP_PACKAGES="$(snap list | tail -n +2 | wc -l)"

	command -v flatpak &>/dev/null &&
		if flatpak info 2>/dev/null | grep -q "Note that the directories"; then
			export XDG_DATA_DIRS="$XDG_DATA_DIRS:$(flatpak info 2>/dev/null | tail -n +4 | head -n 2 | xargs | sed 's/ /:/g')"
		fi && [ "$(flatpak list)" != "" ] && FLATPAK_PACKAGES="$(flatpak list | grep -vc 'Application ID')"

	OS="$(grep PRETTY_NAME </etc/os-release | tr -d '"' | awk -F= '{print $2}')"
	OS_ARCH="$(dpkg --print-architecture)"
	KERNEL="$(uname -mrs)"
	MODEL="$(grep Model </proc/cpuinfo | xargs | sed 's/Model : //g')"
	RAM_SIZE="$(echo "scale=2 ; $(awk '/MemTotal/ {print $2}' /proc/meminfo) / 1024000 " | bc) GB"
	IMAGE_VERSION="$(grep 'Raspberry Pi reference' </etc/rpi-issue | sed 's/Raspberry Pi reference //g')"
	INSTALLED_PACKAGES="dpkg (${DPKG_PACKAGES})$(is_not_empty "${SNAP_PACKAGES}" && echo ", snap (${SNAP_PACKAGES})")$(is_not_empty "${FLATPAK_PACKAGES}" && echo ", flatpak (${FLATPAK_PACKAGES})")"
	UPTIME="$(uptime -p | sed "s/up //g" | sed s/,//g)"
	RESOLUTION="$(fbset -i | grep "mode " | tr -d '"' | tr -d "mode ")"
	DESKTOP_ENVIRONMENT="$XDG_CURRENT_DESKTOP"
	WINDOW_MANAGER="$(xprop -id "$(xprop -root -notype _NET_SUPPORTING_WM_CHECK | sed 's/.*# //')" -notype -len 100 -f _NET_WM_NAME 8t | grep WM_NAME | sed 's/.*= //g' | xargs)"
	OPENGL_VERSION="$(glxinfo -B | grep 'OpenGL ES profile version string' | sed 's/OpenGL ES profile version string: //g')"
	GPU_MODEL="$(glxinfo -B | grep 'Device\|Vendor' | sed 's/.*Device: //g' | sed 's/.*Vendor: //g' | sed -e 's/([^()]*)//g' | xargs)"
	HOSTNAME="$(tr -d " \t\n\r" </etc/hostname)"
	LOCAL_IP="$(hostname -I | awk '{print $1}')"
	PUBLIC_IP="$(wget -qO- ifconfig.me)"
	CURRENT_USER="$(whoami)"
	SOC_VERSION="$(grep Hardware </proc/cpuinfo | cut -c12-18)"
	# shellcheck disable=SC2001
	GPU_TEMPERATURE="$(sed s/temp=//g <<<"$(vcgencmd measure_temp)")"
	CPU_MODEL="$(lscpu | grep "Model name\|Vendor ID" | sed 's/.*://g' | xargs)"

	echo -e "${GREEN}Operating System   ${NORMAL} : $(if is_empty "${OS}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${OS}"; fi)"
	echo -e "${GREEN}OS Architecture    ${NORMAL} : $(if is_empty "${OS_ARCH}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${OS_ARCH}"; fi)"
	echo -e "${GREEN}Kernel             ${NORMAL} : $(if is_empty "${KERNEL}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${KERNEL}"; fi)"
	echo -e "${GREEN}Raspberry Pi Model ${NORMAL} : $(if is_empty "${MODEL}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${MODEL}"; fi)"
	echo -e "${GREEN}RAM Size           ${NORMAL} : $(if is_empty "${RAM_SIZE}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${RAM_SIZE}"; fi)"
	echo -e "${GREEN}Image Version      ${NORMAL} : $(if is_empty "${IMAGE_VERSION}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${IMAGE_VERSION}"; fi)"
	echo -e "${GREEN}Installed Packages ${NORMAL} : $(if is_empty "${INSTALLED_PACKAGES}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${INSTALLED_PACKAGES}"; fi)"
	echo -e "${GREEN}Uptime             ${NORMAL} : $(if is_empty "${UPTIME}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${UPTIME}"; fi)"
	echo -e "${GREEN}Resolution         ${NORMAL} : $(if is_empty "${RESOLUTION}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${RESOLUTION}"; fi)"
	echo -e "${GREEN}Desktop Environment${NORMAL} : $(if is_empty "${DESKTOP_ENVIRONMENT}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${DESKTOP_ENVIRONMENT}"; fi)"
	echo -e "${GREEN}Window Manager     ${NORMAL} : $(if is_empty "${WINDOW_MANAGER}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${WINDOW_MANAGER}"; fi)"
	echo -e "${GREEN}OpenGL Version     ${NORMAL} : $(if is_empty "${OPENGL_VERSION}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${OPENGL_VERSION}"; fi)"
	echo -e "${GREEN}GPU Model          ${NORMAL} : $(if is_empty "${GPU_MODEL}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${GPU_MODEL}"; fi)"
	echo -e "${GREEN}Local IP Address   ${NORMAL} : $(if is_empty "${LOCAL_IP}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${LOCAL_IP}"; fi)"
	echo -e "${GREEN}Public IP Address  ${NORMAL} : $(if is_empty "${PUBLIC_IP}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${PUBLIC_IP}"; fi)"
	echo -e "${GREEN}Current User       ${NORMAL} : $(if is_empty "${CURRENT_USER}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${CURRENT_USER}"; fi)"
	echo -e "${GREEN}SoC Version        ${NORMAL} : $(if is_empty "${SOC_VERSION}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${SOC_VERSION}"; fi)"
	echo -e "${GREEN}GPU Temperature    ${NORMAL} : $(if is_empty "${GPU_TEMPERATURE}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${GPU_TEMPERATURE}"; fi)"
	echo -e "${GREEN}CPU Model          ${NORMAL} : $(if is_empty "${CPU_MODEL}"; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${CPU_MODEL}"; fi)"
}

toggle_overscan() {
	sudo_password
	case "${1}" in
	on)
		set_config_var disable_overscan 0
		;;
	off)
		set_config_var disable_overscan 1
		;;
	esac
}

toggle_spi() {
	case "${1}" in
	on)
		set_config_var dtparam=spi on
		if is_not_file /etc/modprobe.d/raspi-blacklist.conf; then
			sudo touch /etc/modprobe.d/raspi-blacklist.conf
		fi
		sudo sed /etc/modprobe.d/raspi-blacklist.conf -i -e "s/^\(blacklist[[:space:]]*spi[-_]bcm2708\)/#\1/"
		dtparam spi=on

		;;
	off)
		set_config_var dtparam=spi off
		if is_not_file /etc/modprobe.d/raspi-blacklist.conf; then
			sudo touch /etc/modprobe.d/raspi-blacklist.conf
		fi
		sudo sed /etc/modprobe.d/raspi-blacklist.conf -i -e "s/^\(blacklist[[:space:]]*spi[-_]bcm2708\)/#\1/"
		dtparam spi=off
		;;
	esac
}

toggle_i2c() {
	case "${1}" in
	on)
		set_config_var dtparam=i2c_arm on &&
			if is_not_file /etc/modprobe.d/raspi-blacklist.conf; then
				sudo touch /etc/modprobe.d/raspi-blacklist.conf
			fi
		sudo sed /etc/modprobe.d/raspi-blacklist.conf -i -e "s/^\(blacklist[[:space:]]*i2c[-_]bcm2708\)/#\1/"
		sudo sed /etc/modules -i -e "s/^#[[:space:]]*\(i2c[-_]dev\)/\1/"
		if ! grep -q "^i2c[-_]dev" /etc/modules; then
			printf "i2c-dev\n" | sudo tee -a /etc/modules
		fi
		dtparam i2c_arm=on
		modprobe i2c-dev
		;;
	off)
		set_config_var dtparam=i2c_arm off &&
			if is_not_file /etc/modprobe.d/raspi-blacklist.conf; then
				sudo touch /etc/modprobe.d/raspi-blacklist.conf
			fi
		sudo sed /etc/modprobe.d/raspi-blacklist.conf -i -e "s/^\(blacklist[[:space:]]*i2c[-_]bcm2708\)/#\1/"
		sudo sed /etc/modules -i -e "s/^#[[:space:]]*\(i2c[-_]dev\)/\1/"
		if ! grep -q "^i2c[-_]dev" /etc/modules; then
			printf "i2c-dev\n" | sudo tee -a /etc/modules
		fi
		dtparam i2c_arm=off
		modprobe i2c-dev
		;;
	esac
}

toggle_screen_blanking() {
	sudo_password
	case "${1}" in
	on)
		sudo rm -f /etc/X11/xorg.conf.d/10-blanking.conf
		sudo sed -i '/^\o033/d' /etc/issue
		;;
	off)
		mkdir -p /etc/X11/xorg.conf.d/
		sudo cp -a /usr/share/raspi-config/10-blanking.conf /etc/X11/xorg.conf.d/
		echo "\\033[9;0]" | sudo tee -a /etc/issue >/dev/null
		;;
	esac
}

toggle_pixel_doubling() {
	case "${1}" in
	on)
		SCREEN_X_VALUE=$(xrandr 2>&1 | grep current | cut -f2 -d, | cut -f3 -d' ')
		SCREEN_Y_VALUE=$(xrandr 2>&1 | grep current | cut -f2 -d, | cut -f5 -d' ')
		if is_not_number "${SCREEN_X_VALUE}" || is_not_number "${SCREEN_Y_VALUE}"; then
			error "Could not read current screen dimensions."
		fi
		NEW_SCREEN_X_VALUE="$((SCREEN_X_VALUE / 2))"
		NEW_SCREEN_Y_VALUE="$((SCREEN_Y_VALUE / 2))"
		set_config_var framebuffer_width "${NEW_SCREEN_X_VALUE}"
		set_config_var framebuffer_height "${NEW_SCREEN_Y_VALUE}"
		set_config_var scaling_kernel 8
		;;
	off)
		clear_config_var framebuffer_width
		clear_config_var framebuffer_height
		clear_config_var scaling_kernel
		;;
	esac
}

change_password() {
	passwd "$USER"
}

toggle_vnc() {
	sudo_password
	case "${1}" in
	on)
		if is_installed realvnc-vnc-server || sudo apt-get install -y realvnc-vnc-server; then
			sudo systemctl enable vncserver-x11-serviced.service &&
				sudo systemctl start vncserver-x11-serviced.service
		fi
		;;
	off)
		if is_installed realvnc-vnc-server; then
			sudo systemctl disable vncserver-x11-serviced.service
			sudo systemctl stop vncserver-x11-serviced.service
		fi
		;;
	esac
}

toggle_ssh() {
	if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
		error "$LINENO" "Initial ssh key generation still running. Please wait and try again."
	fi
	case "${1}" in
	on)
		ssh-keygen -A &&
			sudo update-rc.d ssh enable &&
			sudo invoke-rc.d ssh start
		;;
	off)
		sudo update-rc.d ssh disable &&
			sudo invoke-rc.d ssh stop
		;;
	esac
}

configure_keyboard() {
	sudo_password
	status "Please select the keymap of the keyboard."
	sudo -E sed -i /etc/default/keyboard -e "s/^XKBLAYOUT.*/XKBLAYOUT=\"$(grep "$(cut -c23- <"${DIRECTORY}/keymaps" | fzf --height 20 --cycle)" <"${DIRECTORY}/keymaps" | cut -c1-22 | xargs)\"/"
	status "Configuring keyboard-configuration..."
	sudo -E dpkg-reconfigure -f noninteractive keyboard-configuration || error "Failed to configure keyboard-configuration."
	status "Enabling keyboard-setup initscript..."
	sudo -E invoke-rc.d keyboard-setup start || error "Failed to enable keyboard-setup initscript."
	status "Setting up keyboard..."
	sudo -E setsid sh -c 'exec setupcon -k --force <> $(echo "/dev/tty$(sudo fgconsole)") >&0' || error "Failed to set up the font and the keyboard on the console.\nOutput:\n${OUTPUT}"
	sudo -E udevadm trigger --subsystem-match=input --action=change || error "Failed to trigger input change in udevadm.\nOutput:\n${OUTPUT}"
}

change_locale() {
	sudo_password
	LOCALE="$(fzf </usr/share/i18n/SUPPORTED)"
	if ! grep -E "^${LOCALE}( |$)" /usr/share/i18n/SUPPORTED; then
		return 1
	fi
	export LC_ALL=C
	export LANG=C
	local LG="/etc/locale.gen"
	local NEW_LANG="$(cut -f1 -d " " <<<"${LOCALE}")"
	[ "$(readlink -f "${LG}")" = "/usr/share/i18n/SUPPORTED" ] && sudo rm -f "${LG}"
	echo "$LOCALE" | sudo tee /etc/locale.gen
	sudo update-locale --no-checks LANG
	sudo update-locale --no-checks "LANG=$NEW_LANG"
	sudo dpkg-reconfigure -f noninteractive locales
}

change_timezone() {
	sudo_password
	local TIMEZONE_LIST="$(timedatectl list-timezones | sed 's/_/ /g')"
	TIMEZONE="$(fzf <<<"${TIMEZONE_LIST}")"
	sudo rm -f /etc/localtime
	echo "$TIMEZONE" | sed 's/ /_//g' | sudo tee /etc/timezone
	sudo dpkg-reconfigure -f noninteractive tzdata
}

set_vnc_resolution() {
	RESOLUTION="$(echo "640x480
720x480
800x600
1024x768
1280x720
1280x1024
1600x1200
1920x1080" | fzf)"

	echo "[Desktop Entry]
Type=Application
Name=vnc_xrandr
Comment=Set resolution for VNC
NoDisplay=true
Exec=sh -c 'if ! (xrandr | grep -q -w connected) ; then $(command -v xrandr) --fb ${RESOLUTION} ; fi'" | sudo tee /etc/xdg/autostart/vnc_xrandr.desktop
}

set_hostname() {
	sudo_password
	CURRENT_HOSTNAME="$(tr -d " \t\n\r" </etc/hostname)"
	read -p "Please enter a hostname: " -r HOSTNAME
	if grep -q -e '[^-0-9A-Z_a-z]' -e '^[^0-9A-Za-z]' -e '[^0-9A-Za-z]$' -e '-_' -e '_-' <<<"${HOSTNAME}"; then
		error "Invalid hostname."
	fi
	echo "${NEW_HOSTNAME}" >/etc/hostname
	sudo sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
}

set_boot_behaviour() {
	sudo_password
	case "${1}" in
	"Console")
		sudo systemctl set-default multi-user.target
		sudo ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
		sudo rm -f /etc/systemd/system/getty@tty1.service.d/autologin.conf
		;;
	"Console Autologin")
		sudo systemctl set-default multi-user.target
		sudo ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
		echo "[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $USER --noclear %I \${TERM}" | sudo tee /etc/systemd/system/getty@tty1.service.d/autologin.conf
		;;
	"Desktop")
		if is_file /etc/init.d/lightdm; then
			sudo systemctl set-default graphical.target
			sudo ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
			sudo rm -f /etc/systemd/system/getty@tty1.service.d/autologin.conf
			sudo sed /etc/lightdm/lightdm.conf -i -e "s/^autologin-user=.*/#autologin-user=/"
			if is_file /etc/profile.d/raspi-config.sh; then
				sudo rm -f /etc/profile.d/raspi-config.sh
				if is_file /etc/systemd/system/getty@tty1.service.d/raspi-config-override.conf; then
					sudo rm -f /etc/systemd/system/getty@tty1.service.d/raspi-config-override.conf
				fi
				sudo telinit q
			fi
		else
			error "Do 'sudo apt-get install lightdm' to allow configuration of boot to desktop"
		fi
		;;
	"Desktop Autologin")
		if is_file /etc/init.d/lightdm; then
			sudo systemctl set-default graphical.target
			sudo ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
			echo "[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $USER --noclear %I \${TERM}" | sudo tee /etc/systemd/system/getty@tty1.service.d/autologin.conf
			sudo sed /etc/lightdm/lightdm.conf -i -e "s/^\(#\|\)autologin-user=.*/autologin-user=$USER/"
			if is_file /etc/profile.d/raspi-config.sh; then
				sudo rm -f /etc/profile.d/raspi-config.sh
				if is_file /etc/systemd/system/getty@tty1.service.d/raspi-config-override.conf; then
					sudo rm -f /etc/systemd/system/getty@tty1.service.d/raspi-config-override.conf
				fi
				sudo telinit q
			fi
		else
			error "Do 'sudo apt-get install lightdm' to allow configuration of boot to desktop"
		fi
		;;
	esac
}

set_boot_wait_network() {
	sudo_password
	OPTION="${1}"
	case "${OPTION}" in
	on)
		sudo mkdir -p /etc/systemd/system/dhcpcd.service.d/
		echo "[Service]
ExecStart=
ExecStart=/usr/sbin/dhcpcd -w -q" | sudo tee /etc/systemd/system/dhcpcd.service.d/wait.conf
		;;
	off)
		sudo rm -f /etc/systemd/system/dhcpcd.service.d/wait.conf
		;;
	esac
}

set_boot_splash() {
	OPTION="${1}"
	if is_not_file /usr/share/plymouth/themes/pix/pix.script; then
		error "The splash screen is not installed so cannot be toggled."
	fi
	case "${OPTION}" in
	on)
		if ! grep -q "splash" /boot/cmdline.txt; then
			sudo sed -i /boot/cmdline.txt -e "s/$/ quiet splash plymouth.ignore-serial-consoles/"
		fi
		;;
	off)
		if grep -q "splash" /boot/cmdline.txt; then
			sed -i /boot/cmdline.txt -e "s/ quiet//"
			sed -i /boot/cmdline.txt -e "s/ splash//"
			sed -i /boot/cmdline.txt -e "s/ plymouth.ignore-serial-consoles//"
		fi
		;;
	esac
}
# error() {
# 	echo -e "${RED}${BOLD}[!]${NORMAL} ${LIGHT_RED}${UNDERLINE}ERROR${NORMAL}" 1>&2
# 	local LINE_INDICATES_ERROR="$1"
# 	shift
# 	while [ "${1}" ]; do
# 		if echo "${1}" | grep -q ' '; then
# 			local ERROR_MESSAGE="${1}" # there is space in $1, assume error message
# 		elif is_number "${1}"; then
# 			local EXIT_CODE="${1}" # $1 is a number, assume exit code
# 		else
# 			local FUNCTION_NAME="${1}" # no space and not number in $1, assume function name
# 		fi
# 		shift
# 	done
# 	local EXIT_CODE="${EXIT_CODE:-1}" # if no exit code specified, fall back to 1

# 	echo "    Near line ${LINE_INDICATES_ERROR}." 1>&2
# 	is_not_empty "${FUNCTION_NAME}" && echo "    At Function: ${FUNCTION_NAME}" 1>&2
# 	is_not_empty "${ERROR_MESSAGE}" && echo "    Error Message: ${ERROR_MESSAGE}" 1>&2
# 	echo "    Exit code: ${EXIT_CODE}" 1>&2
# 	trap '' ERR

# 	exit "${EXIT_CODE}"; kill $$
# }

# trap 'error ${LINENO} ${FUNCNAME}' ERR
trap 'echo -e "${RED}${BOLD}[!]${NORMAL} ${LIGHT_RED}${UNDERLINE}CTRL-C detected. Exiting now.${NORMAL}" 1>&2; exit 1' INT

# check if piped or redirected
if ! [ -t 1 ] || ! [ -t 2 ]; then
	NOT_TERMINAL=1
fi

#text formatting variables
text_format() {
	RED="$(if is_empty ${NOT_TERMINAL}; then echo '\e[31m'; else true; fi)"
	GREEN="$(if is_empty ${NOT_TERMINAL}; then echo '\e[32m'; else true; fi)"
	YELLOW="$(if is_empty ${NOT_TERMINAL}; then echo '\e[33m'; else true; fi)"
	BLUE="$(if is_empty ${NOT_TERMINAL}; then echo '\e[34m'; else true; fi)"
	CYAN="$(if is_empty ${NOT_TERMINAL}; then echo '\e[36m'; else true; fi)"
	LIGHT_RED="$(if is_empty ${NOT_TERMINAL}; then echo '\e[91m'; else true; fi)"
	LIGHT_GREEN="$(if is_empty ${NOT_TERMINAL}; then echo '\e[92m'; else true; fi)"
	LIGHT_YELLOW="$(if is_empty ${NOT_TERMINAL}; then echo '\e[93m'; else true; fi)"
	LIGHT_BLUE="$(if is_empty ${NOT_TERMINAL}; then echo '\e[94m'; else true; fi)"
	LIGHT_CYAN="$(if is_empty ${NOT_TERMINAL}; then echo '\e[96m'; else true; fi)"
	WHITE="$(if is_empty ${NOT_TERMINAL}; then echo '\e[97m'; else true; fi)"
	DARK_GREY="$(if is_empty ${NOT_TERMINAL}; then echo '\e[90m'; else true; fi)"
	BOLD="$(if is_empty ${NOT_TERMINAL}; then echo '\e[1m'; else true; fi)"
	UNDERLINE="$(if is_empty ${NOT_TERMINAL}; then echo '\e[4m'; else true; fi)"
	INVERTED="$(if is_empty ${NOT_TERMINAL}; then echo '\e[7m'; else true; fi)"
	NORMAL="$(if is_empty ${NOT_TERMINAL}; then echo '\e[0m'; else true; fi)"
	DIM="$(if is_empty ${NOT_TERMINAL}; then echo '\e[2m'; else true; fi)"
}

text_format
testfunc || error "Failed to run testfunc." 2
"$@"

# wow || error "failed"
# set_keyboard
# case $1 in
# 	-h|--help)
# 		show_help_ERROR_MESSAGE
# 	;;
# 	di|device-info)
# 		shift
# 		"${DIRECTORY}/scripts/get-device-info" || exit 1
# 	;;
# 	bt|bluetooth)
# 		shift
# 		"${DIRECTORY}/scripts/bluetooth" "$@" || exit 1
# 	;;
# 	u|update-apps)
# 		shift
# 		update_apps
# 	;;
# 	sk|set-keyboard)
# 		shift
# 		set_keyboard
# 	;;
# 	ef|expand-filesystem)
# 		shift
# 		expand_rootfs
# 	;;
# 	wf|wifi)
# 		shift
# 		"${DIRECTORY}/scripts/wifi" "$@" || exit 1
# 	;;
# 	*)
# 		pi-tools_help_ERROR_MESSAGE
# esac
#echo "$(echo "apt ($(apt list --installed  | grep -v Listing 2>/dev/null | wc -l))")$([ -a "$(command -v snap)" ] && if ! snap list 2>&1 | grep -q "No snaps are installed"; then echo " snap ($(snap list | tail -n +2 | wc -l))"; fi)$([ -a "$(command -v flatpak)" ] && if flatpak info 2>/dev/null | grep -q "Note that the directories"; then export XDG_DATA_DIRS="$XDG_DATA_DIRS:$(flatpak info 2>/dev/null | tail -n +4 | head -n 2 | xargs | sed 's/ /:/g')"; fi && [ "$(flatpak list)" != "" ] && echo " flatpak ($(flatpak list | grep -v "Application ID"  | wc -l))")"
