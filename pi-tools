#!/bin/bash
# shellcheck disable=SC2155,SC2094,SC2034,SC2059

DIRECTORY="$(dirname "$(readlink -f "$0")")"

#text formatting variables
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
CYAN="\e[36m"
LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_CYAN="\e[96m"
WHITE="\e[97m"
DARK_GREY="\e[90m"
BOLD="\e[1m"
UNDERLINE="\e[4m"
INVERTED="\e[7m"
NORMAL="\e[0m"
DIM="\e[2m"

error() {
	echo -e "${RED}${BOLD}[!]${NORMAL} ${LIGHT_RED}${1}${NORMAL}" 
	if ! echo "$@" | grep -q 'no-exit'; then
		exit 1
	fi
}

question() {
	echo -e "${YELLOW}${BOLD}[?]${NORMAL} ${LIGHT_YELLOW}$1${NORMAL}" 
}

status() { 
	echo -e "${CYAN}${BOLD}[-]${NORMAL} ${LIGHT_CYAN}$1${NORMAL}" 
}

status_bold() { 
	echo -e "${CYAN}${BOLD}[-]${NORMAL} ${LIGHT_CYAN}${BOLD}$1${NORMAL}" 
}

success() { 
	echo -e "${GREEN}${BOLD}[✔]${NORMAL} ${LIGHT_GREEN}$1${NORMAL}" 
}

success_bold() {
	echo -e "${GREEN}${BOLD}[✔]${NORMAL} ${LIGHT_GREEN}${BOLD}$1${NORMAL}"
}

show_help_message() {
	echo "╱╱╱╱╱╱╱╭╮╱╱╱╱╱╱╭╮
╱╱╱╱╱╱╭╯╰╮╱╱╱╱╱┃┃
╭━━┳╮╱╰╮╭╋━━┳━━┫┃╭━━╮
┃╭╮┣╋━━┫┃┃╭╮┃╭╮┃┃┃━━┫
┃╰╯┃┣━━┫╰┫╰╯┃╰╯┃╰╋━━┃
┃╭━┻╯╱╱╰━┻━━┻━━┻━┻━━╯
┃┃
╰╯"
	echo "pi-tools (pt) 1.0 on Raspberry Pi ${PI_VERSION}, $(dpkg --print-architecture)"
	echo "Installed at ${DIRECTORY}."
	echo
	echo "pi-tools is a command-line tool to access almost all settings, functions, etc, of your Raspberry Pi."
   
}

get_device_info() {
	
	OS="$(grep PRETTY_NAME  < /etc/os-release | tr -d '"' | awk -F= '{print $2}')" 
	OS_ARCH="$(dpkg --print-architecture)" 
	KERNEL="$(uname -mrs)" 
	MODEL="$(grep Model  < /proc/cpuinfo | xargs | sed 's/Model : //g')" 
	RAM_SIZE="$(echo "scale=2 ; $( awk '/MemTotal/ {print $2}' /proc/meminfo ) / 1024000 " | bc ) GB"
	IMAGE_VERSION="$(grep 'Raspberry Pi reference'  < /etc/rpi-issue | sed 's/Raspberry Pi reference //g')" 
	INSTALLED_PACKAGES="dpkg ($(dpkg --get-selections | grep -vc deinstall))$([ -a "$(command -v snap)" ] && if ! snap list 2>&1 | grep -q "No snaps are installed"; then echo ", snap ($(snap list | tail -n +2 | wc -l))"; fi)$([ -a "$(command -v flatpak)" ] && if flatpak info 2>/dev/null | grep -q "Note that the directories"; then export XDG_DATA_DIRS="$XDG_DATA_DIRS:$(flatpak info 2>/dev/null | tail -n +4 | head -n 2 | xargs | sed 's/ /:/g')"; fi && [ "$(flatpak list)" != "" ] && echo ", flatpak ($(flatpak list | grep -c "Application ID"))")$([ -a "$HOME/.local/share/applications/pi-apps.desktop" ] && [ "$($(grep Exec < "$HOME/.local/share/applications/pi-apps.desktop" | sed s/Exec=//g | sed s/gui/api/g) list_apps installed)" != "" ] && echo ", pi-apps ($($(grep Exec < "$HOME/.local/share/applications/pi-apps.desktop" | sed s/Exec=//g | sed s/gui/api/g) list_apps installed | wc -l))")"
	UPTIME="$(uptime -p | sed "s/up //g" | sed s/,//g)" 
	RESOLUTION="$(fbset -i  | grep "mode " | tr -d '"' | tr -d "mode ")" 
	DESKTOP_ENVIRONMENT="$XDG_CURRENT_DESKTOP" 
	WINDOW_MANAGER="$(xprop -id "$(xprop -root -notype _NET_SUPPORTING_WM_CHECK | sed 's/.*# //')" -notype -len 100 -f _NET_WM_NAME 8t | grep WM_NAME | sed 's/.*= //g' | xargs)" 
	OPENGL_VERSION="$(glxinfo -B | grep 'OpenGL ES profile version string' | sed 's/OpenGL ES profile version string: //g')"
	GPU_MODEL="$(glxinfo -B | grep 'Device\|Vendor' | sed 's/.*Device: //g' | sed 's/.*Vendor: //g' | sed -e 's/([^()]*)//g' | xargs)"
	HOSTNAME="$(hostname)"
	LOCAL_IP="$(hostname -I | awk '{print $1}')"
	PUBLIC_IP="$(wget -qO- ifconfig.me)"
	CURRENT_USER="$(whoami)"
	SOC_VERSION="$(grep Hardware < /proc/cpuinfo | cut -c12-18)"

	
	if echo "$@" | grep -q noprint; then
		true
	else
		echo -e "${GREEN}Operating system   ${NORMAL} : $(if [ "${OS}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${OS}"; fi)"
		echo -e "${GREEN}OS Architecture    ${NORMAL} : $(if [ "${OS_ARCH}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${OS_ARCH}"; fi)"
		echo -e "${GREEN}Kernel             ${NORMAL} : $(if [ "${KERNEL}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${KERNEL}"; fi)"
		echo -e "${GREEN}Raspberry Pi Model ${NORMAL} : $(if [ "${MODEL}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${MODEL}"; fi)"
		echo -e "${GREEN}RAM Size           ${NORMAL} : $(if [ "${RAM_SIZE}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${RAM_SIZE}"; fi)"
		echo -e "${GREEN}Image Version      ${NORMAL} : $(if [ "${IMAGE_VERSION}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${IMAGE_VERSION}"; fi)"
		echo -e "${GREEN}Installed Packages ${NORMAL} : $(if [ "${INSTALLED_PACKAGES}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${INSTALLED_PACKAGES}"; fi)"
		echo -e "${GREEN}Uptime             ${NORMAL} : $(if [ "${UPTIME}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${UPTIME}"; fi)"
		echo -e "${GREEN}Resolution         ${NORMAL} : $(if [ "${RESOLUTION}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${RESOLUTION}"; fi)"
		echo -e "${GREEN}Desktop Environment${NORMAL} : $(if [ "${DESKTOP_ENVIRONMENT}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${DESKTOP_ENVIRONMENT}"; fi)"
		echo -e "${GREEN}Window Manager     ${NORMAL} : $(if [ "${WINDOW_MANAGER}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${WINDOW_MANAGER}"; fi)"
		echo -e "${GREEN}OpenGL Version     ${NORMAL} : $(if [ "${OPENGL_VERSION}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${OPENGL_VERSION}"; fi)"
		echo -e "${GREEN}GPU Model          ${NORMAL} : $(if [ "${GPU_MODEL}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${GPU_MODEL}"; fi)"
		echo -e "${GREEN}Local IP Address   ${NORMAL} : $(if [ "${LOCAL_IP}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${LOCAL_IP}"; fi)"
		echo -e "${GREEN}Public IP Address  ${NORMAL} : $(if [ "${PUBLIC_IP}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${PUBLIC_IP}"; fi)"
		echo -e "${GREEN}Current User       ${NORMAL} : $(if [ "${CURRENT_USER}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${CURRENT_USER}"; fi)"
		echo -e "${GREEN}SoC Version        ${NORMAL} : $(if [ "${SOC_VERSION}" == "" ]; then echo -e "${DARK_GREY}Not available${NORMAL}"; else echo "${SOC_VERSION}"; fi)"
	fi
}

sudo_password() {
	if ! sudo -n ls &>/dev/null; then 
		status "This operation needs root access."
		sudo -S true || error "Authentication Failed." 
		success "Root authentication success."
	fi
}

get_pi_version() {
	if grep -q "^Revision\s*:\s*00[0-9a-fA-F][0-9a-fA-F]$" /proc/cpuinfo || grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[0-36][0-9a-fA-F]$" /proc/cpuinfo ; then
		PI_VERSION=1
	elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]04[0-9a-fA-F]$" /proc/cpuinfo; then
		PI_VERSION=2
	elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]0[9cC][0-9a-fA-F]$" /proc/cpuinfo; then
		PI_VERSION=3
	elif grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F]3[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]$" /proc/cpuinfo; then
		PI_VERSION=4
	else
		error "Raspberry Pi version not detected.\nIf you are using a Raspberry Pi 1, 2, 3 or 4, PLEASE report to https://github.com/cycool29/pi-tools/issue."
	fi
}



update_apps() {
	sudo_password
	status_bold "Updating APT"
	status "Updating APT package list..."
	OUTPUT="$(sudo apt update --allow-releaseinfo-change 2>&1)" || error "Failed to update APT package list.:\n${OUTPUT}"
	if echo "$OUTPUT" | grep -q "All packages are up to date"; then
		success "All APT packages are up to date." 
	elif echo "$OUTPUT" | grep -q 'can be upgraded'; then
		echo "$OUTPUT" | grep 'can be upgraded' --color=None | sed "s/Run 'apt list --upgradable' to see it.//g"
	else 
		error "pi-tools failed to parse APT output:\n$OUTPUT" 
		
	fi
	success_bold "Done"
}

expand_rootfs() {
	sudo_password
	ROOT_PARTITION="$(sudo findmnt / -o source -n)"
	ROOT_DEVICE="/dev/$(sudo lsblk -no pkname "$ROOT_PARTITION")"

	PARTITION_NUMBER="$(echo "$ROOT_PARTITION" | grep -o "[[:digit:]]*$")"

	if [ "${PARTITION_NUMBER}" -ne 2 ]; then
		error "Your partition layout is not currently supported by this tool. You are probably using NOOBS, in which case your root filesystem is already expanded anyway." 
	fi

	LAST_PARTITION_NUMBER=$(sudo parted "$ROOT_DEVICE" -ms unit s p | tail -n 1 | cut -f 1 -d:)
	if [ "${LAST_PARTITION_NUMBER}" -ne "${PARTITION_NUMBER}" ]; then
		error "${ROOT_PARTITION} is not the last partition. Don't know how to expand."
	fi

	PARTITION_START=$(sudo parted "${ROOT_DEVICE}" -ms unit s p | grep "^${PARTITION_NUMBER}" | cut -f 2 -d: | sed 's/[^0-9]//g')
	[ "${PARTITION_START}" ] || return 1

	echo -e "${GREEN}Root Device           ${NORMAL} : ${ROOT_DEVICE}"
	echo -e "${GREEN}Root Partition        ${NORMAL} : ${ROOT_PARTITION}"
	echo -e "${GREEN}Root Partition Offset ${NORMAL} : $(sudo parted "${ROOT_DEVICE}" -ms unit gb p | grep "^${PARTITION_NUMBER}" | cut -f 2 -d: | sed 's/[^0-9]//g' | sed s/^0*//g)GB"

	status "Changing root flesystem partition table using fdisk..."
	OUTPUT="$(printf "p
d
${PARTITION_NUMBER}
n
p
${PARTITION_NUMBER}
${PARTITION_START}
p
w" | sudo fdisk "${ROOT_DEVICE}" 2>&1)" || error "Failed to change root filesystem partition table using fdisk."

	cat <<EOF | sudo tee /etc/init.d/resize2fs_once &>/dev/null &&
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 3
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO
. /lib/lsb/init-functions
case "\$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs "$ROOT_PART" &&
    update-rc.d resize2fs_once remove &&
    rm /etc/init.d/resize2fs_once &&
    log_end_msg \$?
    ;;
  *)
	echo "Usage: \$0 start" >&2
	exit 3
	;;
esac
EOF
	status "Making '/etc/init.d/resize2fs_once' executable..."
	OUTPUT="$(sudo chmod +x /etc/init.d/resize2fs_once 2>&1)" || error "Failed to make '/etc/init.d/resize2fs_once' executable.\nOutput:\n${OUTPUT}"
	status "Installing resize2fs_once init script..."
	OUTPUT="$(sudo update-rc.d resize2fs_once defaults 2>&1)" || error "Failed to install resize2fs_once init script.\nOutput:\n${OUTPUT}"
	success_bold "Root partition has been resized.\nThe filesystem will be enlarged upon the next reboot."
	question "Do you want to reboot now?"
	read -rp "[y/n] " INPUT
	case "$INPUT" in
		y|Y|yes|Yes|YES)
			printf "${ESC}[?25l"
			for i in {6..1}; do
			  echo -ne "Rebooting in: $i\r (Use Ctrl-C to abort) " && sleep 1
			done
			OUTPUT="$(sudo reboot)" || error "Failed to reboot.\nOutput:\n${OUTPUT}"
		;;
		*)
			echo "Exiting now."
			exit 0
		;;
	esac
}

set_keyboard() {
	status_bold "Configuring keyboard"
	sudo_password
	status "Please select the keymap of the keyboard."
	sudo -E sed -i /etc/default/keyboard -e "s/^XKBLAYOUT.*/XKBLAYOUT=\"$(grep "$(cut -c23- < "${DIRECTORY}/keymaps" | fzf --height 20 --cycle)" < "${DIRECTORY}/keymaps" | cut -c1-22 | xargs)\"/"
	status "Configuring keyboard-configuration..."
	OUTPUT="$(sudo -E dpkg-reconfigure -f noninteractive keyboard-configuration 2>&1)" || error "Failed to configure keyboard-configuration.\nOutput:\n${OUTPUT}"
	status "Enabling keyboard-setup initscript..."
	OUTPUT="$(sudo -E invoke-rc.d keyboard-setup start)" || error "Failed to enable keyboard-setup initscript.\nError:\n${OUTPUT}"
	status "Setting up keyboard..."
	sudo -E setsid sh -c 'exec setupcon -k --force <> /dev/tty1 >&0 2>&1' || error "Failed to set up the font and the keyboard on the console.\nOutput:\n${OUTPUT}"
	sudo -E udevadm trigger --subsystem-match=input --action=change || error "Failed to trigger input change in udevadm.\nOutput:\n${OUTPUT}"
	success_bold "Done"
}

get_debian_version(){
	DEBIAN_VERSION="$(cut -d . -f 1 < /etc/debian_version)" || error "Failed to retrieve Debian version number.\nPLEASE report to https://github.com/cycool29/pi-tools/issue if you are on Raspberry Pi."
}

trap "error 'Exiting now.'" INT

sudo_password
while read -r i; do
	if [ "$(dpkg -l "$i" 2> /dev/null | tail -n 1 | cut -d ' ' -f 1)" != "ii" ]; then
		PACKAGE_TO_INSTALL+="$i "
	fi
done <"${DIRECTORY}/dependencies"

[ "${PACKAGE_TO_INSTALL}" != '' ] && status_bold "Installing required dependencies" && (OUTPUT="$(sudo apt-get update 2>&1 && sudo apt-get install "${PACKAGE_TO_INSTALL}" 2>&1)" || error "Failed to install required dependencies.\nError:\n${OUTPUT}")

if ! ping -q -c1 example.com &>/dev/null; then
	status "No internet connection (failed to ping example.com), running in no internet mode..."
	NO_INTERNET=1
fi
get_pi_version
get_device_info noprint
get_debian_version

case $1 in
	-h|--help)
		show_help_message
	;;
	d|device-info)
		shift
		if [ "$1" == "--noprint" ]; then
			get_device_info noprint
		else 
			get_device_info
		fi
	;;
	u|update-apps)
		shift
		update_apps
	;;
	sk|set-keyboard)
		shift
		set_keyboard
	;;
	ef|expand-filesystem)
		shift
		expand_rootfs
	;;
	*)
		error "Option not recognized.\n" --no-exit
		show_help_message
esac
#echo "$(echo "apt ($(apt list --installed  | grep -v Listing 2>/dev/null | wc -l))")$([ -a "$(command -v snap)" ] && if ! snap list 2>&1 | grep -q "No snaps are installed"; then echo " snap ($(snap list | tail -n +2 | wc -l))"; fi)$([ -a "$(command -v flatpak)" ] && if flatpak info 2>/dev/null | grep -q "Note that the directories"; then export XDG_DATA_DIRS="$XDG_DATA_DIRS:$(flatpak info 2>/dev/null | tail -n +4 | head -n 2 | xargs | sed 's/ /:/g')"; fi && [ "$(flatpak list)" != "" ] && echo " flatpak ($(flatpak list | grep -v "Application ID"  | wc -l))")"
